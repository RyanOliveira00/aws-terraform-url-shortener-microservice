name: 🔍 PR Validation

on:
  pull_request:
    branches: [ main, master ]
    types: [opened, synchronize, reopened]

env:
  AWS_REGION: us-east-1

jobs:
  validation:
    name: 🧪 Validate Changes
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for better diffs

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: 📦 Install Dependencies
        run: |
          # Install all dependencies
          cd src/api-service && pip install -r requirements.txt && cd ../..
          cd src/processing-service && pip install -r requirements.txt && cd ../..
          
          # Install linting tools
          pip install flake8 black isort mypy

      - name: 🔍 Code Quality Checks
        run: |
          echo "🔍 Running code quality checks..."
          
          # Python linting
          echo "📋 Linting API Service..."
          flake8 src/api-service/app.py --max-line-length=100 --statistics
          
          echo "📋 Linting Processing Service..."
          flake8 src/processing-service/worker.py --max-line-length=100 --statistics
          
          # Check code formatting (dry-run)
          echo "🎨 Checking code formatting..."
          black --check --diff src/api-service/app.py || echo "API Service needs formatting"
          black --check --diff src/processing-service/worker.py || echo "Processing Service needs formatting"
          
          # Check import sorting
          echo "📤 Checking import sorting..."
          isort --check-only --diff src/api-service/app.py || echo "API Service imports need sorting"
          isort --check-only --diff src/processing-service/worker.py || echo "Processing Service imports need sorting"

      - name: 🧪 Unit Tests (if any)
        run: |
          echo "🧪 Running unit tests..."
          # Add unit tests here when available
          echo "No unit tests configured yet"

      - name: 🐳 Docker Build Test
        run: |
          echo "🐳 Testing Docker builds..."
          
          # Test API Service build
          echo "Building API Service..."
          cd src/api-service
          docker build --platform linux/amd64 -t test-api:pr-${{ github.event.number }} .
          cd ../..
          
          # Test Processing Service build
          echo "Building Processing Service..."
          cd src/processing-service
          docker build --platform linux/amd64 -t test-processing:pr-${{ github.event.number }} .
          cd ../..
          
          echo "✅ Docker builds successful"

      - name: 🔧 Terraform Validation
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest

      - name: 🏗️ Terraform Check
        run: |
          cd iac
          terraform init -backend=false
          terraform validate
          terraform fmt -check=true
          echo "✅ Terraform validation passed"

      - name: 📊 PR Summary
        if: always()
        run: |
          echo "## 🔍 PR Validation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Code Quality | ✅ Completed |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Builds | ✅ Completed |" >> $GITHUB_STEP_SUMMARY
          echo "| Terraform | ✅ Completed |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎯 **Ready for review!**" >> $GITHUB_STEP_SUMMARY

  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔒 Run Security Scan
        uses: github/super-linter@v4
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_PYTHON_FLAKE8: true
          VALIDATE_DOCKERFILE_HADOLINT: true
          VALIDATE_TERRAFORM_TFLINT: false  # Disable for now
          PYTHON_FLAKE8_CONFIG_FILE: .flake8

  dependencies:
    name: 📦 Dependency Check
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 🔍 Check for Security Vulnerabilities
        run: |
          pip install safety pip-audit
          
          # Check API Service dependencies
          echo "🔍 Checking API Service dependencies..."
          cd src/api-service
          safety check -r requirements.txt || echo "Security issues found in API Service"
          pip-audit -r requirements.txt || echo "Audit issues found in API Service"
          cd ../..
          
          # Check Processing Service dependencies
          echo "🔍 Checking Processing Service dependencies..."
          cd src/processing-service
          safety check -r requirements.txt || echo "Security issues found in Processing Service"
          pip-audit -r requirements.txt || echo "Audit issues found in Processing Service" 